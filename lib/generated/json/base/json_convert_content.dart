// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:wanandroid_learning_flutter/model/project_category_entity.dart';
import 'package:wanandroid_learning_flutter/generated/json/project_category_entity_helper.dart';
import 'package:wanandroid_learning_flutter/model/blogger_list_entity.dart';
import 'package:wanandroid_learning_flutter/generated/json/blogger_list_entity_helper.dart';
import 'package:wanandroid_learning_flutter/model/login_entity.dart';
import 'package:wanandroid_learning_flutter/generated/json/login_entity_helper.dart';
import 'package:wanandroid_learning_flutter/model/home_article_entity.dart';
import 'package:wanandroid_learning_flutter/generated/json/home_article_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case ProjectCategoryEntity:
			return projectCategoryEntityFromJson(data as ProjectCategoryEntity, json) as T;			case ProjectCategoryData:
			return projectCategoryDataFromJson(data as ProjectCategoryData, json) as T;			case BloggerListEntity:
			return bloggerListEntityFromJson(data as BloggerListEntity, json) as T;			case BloggerListData:
			return bloggerListDataFromJson(data as BloggerListData, json) as T;			case LoginEntity:
			return loginEntityFromJson(data as LoginEntity, json) as T;			case LoginData:
			return loginDataFromJson(data as LoginData, json) as T;			case HomeArticleEntity:
			return homeArticleEntityFromJson(data as HomeArticleEntity, json) as T;			case HomeArticleData:
			return homeArticleDataFromJson(data as HomeArticleData, json) as T;			case HomeArticleDataData:
			return homeArticleDataDataFromJson(data as HomeArticleDataData, json) as T;			case HomeArticleDataDatasTag:
			return homeArticleDataDatasTagFromJson(data as HomeArticleDataDatasTag, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case ProjectCategoryEntity:
			return projectCategoryEntityToJson(data as ProjectCategoryEntity);			case ProjectCategoryData:
			return projectCategoryDataToJson(data as ProjectCategoryData);			case BloggerListEntity:
			return bloggerListEntityToJson(data as BloggerListEntity);			case BloggerListData:
			return bloggerListDataToJson(data as BloggerListData);			case LoginEntity:
			return loginEntityToJson(data as LoginEntity);			case LoginData:
			return loginDataToJson(data as LoginData);			case HomeArticleEntity:
			return homeArticleEntityToJson(data as HomeArticleEntity);			case HomeArticleData:
			return homeArticleDataToJson(data as HomeArticleData);			case HomeArticleDataData:
			return homeArticleDataDataToJson(data as HomeArticleDataData);			case HomeArticleDataDatasTag:
			return homeArticleDataDatasTagToJson(data as HomeArticleDataDatasTag);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'ProjectCategoryEntity':
			return ProjectCategoryEntity().fromJson(json);			case 'ProjectCategoryData':
			return ProjectCategoryData().fromJson(json);			case 'BloggerListEntity':
			return BloggerListEntity().fromJson(json);			case 'BloggerListData':
			return BloggerListData().fromJson(json);			case 'LoginEntity':
			return LoginEntity().fromJson(json);			case 'LoginData':
			return LoginData().fromJson(json);			case 'HomeArticleEntity':
			return HomeArticleEntity().fromJson(json);			case 'HomeArticleData':
			return HomeArticleData().fromJson(json);			case 'HomeArticleDataData':
			return HomeArticleDataData().fromJson(json);			case 'HomeArticleDataDatasTag':
			return HomeArticleDataDatasTag().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'ProjectCategoryEntity':
			return List<ProjectCategoryEntity>();			case 'ProjectCategoryData':
			return List<ProjectCategoryData>();			case 'BloggerListEntity':
			return List<BloggerListEntity>();			case 'BloggerListData':
			return List<BloggerListData>();			case 'LoginEntity':
			return List<LoginEntity>();			case 'LoginData':
			return List<LoginData>();			case 'HomeArticleEntity':
			return List<HomeArticleEntity>();			case 'HomeArticleData':
			return List<HomeArticleData>();			case 'HomeArticleDataData':
			return List<HomeArticleDataData>();			case 'HomeArticleDataDatasTag':
			return List<HomeArticleDataDatasTag>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}